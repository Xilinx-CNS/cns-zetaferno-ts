<?xml version="1.0" encoding="UTF-8"?>
<!-- SPDX-License-Identifier: Apache-2.0 -->
<!-- (c) Copyright 2016 - 2022 Xilinx, Inc. All rights reserved. -->
<test name="tcp" type="package">
  <objective>TCP tests</objective>
  <notes/>
  <iter result="PASSED">
    <notes/>
    <test name="locked_rx_buffers" type="script">
      <objective>Receive some data on TCP zocket using zft_zc_recv(), but do not call zft_zc_recv_done(). Overfill RX/TX buffers of the second TCP zocket, send/receive some data using the second zocket. Check that read buffers of the first zocket are left untouched after all.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="open_method"/>
        <arg name="recv_func"/>
        <notes/>
      </iter>
    </test>
    <test name="zc_read_buffers" type="script">
      <objective>Read packets using various buffers number (iovcnt) in random order a lot of times, check for resources leakage. Use various buffers number (iovcnt) in random order in zero-copy read.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="open_method"/>
        <arg name="bunches_num"/>
        <arg name="bunch_size"/>
        <arg name="iovcnt"/>
        <arg name="recv_done_some"/>
        <notes/>
      </iter>
    </test>
    <test name="wait_for_time_wait" type="script">
      <objective>Check that tcp_wait_for_time_wait attribute works as expected.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="tcp_wait_for_time_wait"/>
        <arg name="open_method"/>
        <arg name="use_muxer"/>
        <arg name="muxer_timeout"/>
        <notes/>
      </iter>
    </test>
    <test name="delayed_ack" type="script">
      <objective>Check that tcp_delayed_ack attribute works as expected.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="active"/>
        <arg name="delay_reactor"/>
        <arg name="env"/>
        <arg name="tcp_delayed_ack"/>
        <notes/>
      </iter>
    </test>
    <test name="listen_backlog" type="script">
      <objective>Test that a few unaccepted (queued) connections can be accepted by a listener zocket. I.e. check that a few SYN requests (from different sources), which come between zf_reactor_perform() calls, are processed correctly.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="clients_num"/>
        <arg name="accept_one"/>
        <arg name="recv_func"/>
        <notes/>
      </iter>
    </test>
    <test name="tcp_passive" type="script">
      <objective>Test passive opening of TCP connection, sending and receiving some data over it.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="shutdown_how"/>
        <arg name="recv_func"/>
        <arg name="send_func"/>
        <notes/>
      </iter>
    </test>
    <test name="tcp_active" type="script">
      <objective>Test active opening of TCP connection, sending and receiving some data over it.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="recv_func"/>
        <arg name="send_func"/>
        <notes/>
      </iter>
    </test>
    <test name="bind_address_types" type="script">
      <objective>Pass a specific address, INADDR_ANY or NULL, using nonzero or zero port, to zft_addr_bind() call. Check that data can be sent in all cases when bind call is successful.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="local_addr_type"/>
        <notes/>
      </iter>
     </test>
    <test name="bind_twice" type="script">
      <objective>Attempt to bind twice should fail, no matter which address is supplied.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="addr_type"/>
        <arg name="same_addr"/>
        <arg name="same_port"/>
        <notes/>
      </iter>
    </test>
    <test name="listen_address_types" type="script">
      <objective>Pass a specific address, INADDR_ANY or NULL, using non-zero or zero port, to zftl_listen() call. Check that connections can be accepted in all cases when the call is successful.</objective>
      <notes/>
      <iter result="PASSED" >
        <arg name="addr_type">wildcard</arg>
        <arg name="env"/>
        <notes/>
        <results tags="linux" key="Expected behavior">
          <result value="FAILED">
            <verdict>zftl_listen() failed with errno RPC-EOPNOTSUPP</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED" >
        <arg name="addr_type">wildcard_zero_port</arg>
        <arg name="env"/>
        <notes/>
        <results tags="linux" key="Expected behavior">
          <result value="FAILED">
            <verdict>zftl_listen() failed with errno RPC-EOPNOTSUPP</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED" >
        <arg name="addr_type">specific</arg>
        <arg name="env"/>
        <notes/>
      </iter>
      <iter result="PASSED" >
        <arg name="addr_type">specific_zero_port</arg>
        <arg name="env"/>
        <notes/>
      </iter>
    </test>
     <test name="unaccepted_endpoints_limit" type="script">
      <objective>Initiate a lot of connection requests from tester - more then the endpoints limit, check that the first (64 by default) connections are accepted.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="max_tcp_endpoints"/>
        <notes/>
      </iter>
    </test>
     <test name="endpoints_limit" type="script">
      <objective>Specify maximum number of endpoints using ZF attribute max_tcp_endpoints, allocate all possible zockets and check that they can send/receive data.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="max_tcp_endpoints"/>
        <arg name="connect_after_bind"/>
        <notes/>
      </iter>
    </test>
    <test name="listen_share_stack" type="script">
      <objective>Accept maximum number of connections by two listener zockets. Connections should be successively accepted until file descriptors limit is exceed. Check that exceeding of file descriptors limit is properly handled by both listeners.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="same_addr"/>
        <arg name="same_port"/>
        <arg name="overflow_limit"/>
        <arg name="recv_func"/>
        <notes/>
      </iter>
    </test>
    <test name="zockets_release" type="script">
      <objective>Open-close up to maximum zockets number in the loop multiple times.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="active">TRUE</arg>
        <arg name="close_iut_first">FALSE</arg>
        <arg name="close_zockets">TRUE</arg>
        <arg name="env"/>
        <arg name="iterations_num"/>
        <arg name="read_all">TRUE</arg>
        <arg name="recreate_listener"/>
        <arg name="recreate_stack">TRUE</arg>
        <arg name="zero_state_wait"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="active">TRUE</arg>
        <arg name="close_iut_first">TRUE</arg>
        <arg name="close_zockets"/>
        <arg name="env"/>
        <arg name="iterations_num"/>
        <arg name="read_all">TRUE</arg>
        <arg name="recreate_listener"/>
        <arg name="recreate_stack">FALSE</arg>
        <arg name="zero_state_wait">FALSE</arg>
        <notes/>
        <results tags="linux" key="L5 63520">
          <result value="FAILED">
            <verdict>zft_alloc() failed with errno RPC-ENOBUFS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="active"/>
        <arg name="close_iut_first">TRUE</arg>
        <arg name="close_zockets"/>
        <arg name="env"/>
        <arg name="iterations_num"/>
        <arg name="read_all">FALSE</arg>
        <arg name="recreate_listener">TRUE</arg>
        <arg name="recreate_stack">FALSE</arg>
        <arg name="zero_state_wait">FALSE</arg>
        <notes/>
        <results tags="linux" key="L5 63520">
          <result value="FAILED">
            <verdict>zftl_listen() failed with errno RPC-ENOBUFS</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="active"/>
        <arg name="close_iut_first">TRUE</arg>
        <arg name="close_zockets"/>
        <arg name="env"/>
        <arg name="iterations_num"/>
        <arg name="read_all">TRUE</arg>
        <arg name="recreate_listener">TRUE</arg>
        <arg name="recreate_stack">FALSE</arg>
        <arg name="zero_state_wait">FALSE</arg>
        <notes/>
        <results tags="linux" key="L5 63520">
          <result value="FAILED">
            <verdict>rpc_zf_wait_for_event() failed with errno RCF_PCH-ERPCTIMEOUT while processing incoming connection</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="active">FALSE</arg>
        <arg name="close_iut_first">TRUE</arg>
        <arg name="close_zockets"/>
        <arg name="env"/>
        <arg name="iterations_num"/>
        <arg name="read_all">TRUE</arg>
        <arg name="recreate_listener">FALSE</arg>
        <arg name="recreate_stack">FALSE</arg>
        <arg name="zero_state_wait">FALSE</arg>
        <notes/>
        <results tags="linux" key="L5 63520">
          <result value="FAILED">
            <verdict>rpc_zf_wait_for_event() failed with errno RCF_PCH-ERPCTIMEOUT while processing incoming connection</verdict>
          </result>
        </results>
      </iter>
      <iter result="PASSED">
        <arg name="active">TRUE</arg>
        <arg name="close_iut_first">TRUE</arg>
        <arg name="close_zockets"/>
        <arg name="env"/>
        <arg name="iterations_num"/>
        <arg name="read_all">FALSE</arg>
        <arg name="recreate_listener"/>
        <arg name="recreate_stack">FALSE</arg>
        <arg name="zero_state_wait">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="active">FALSE</arg>
        <arg name="close_iut_first">TRUE</arg>
        <arg name="close_zockets"/>
        <arg name="env"/>
        <arg name="iterations_num"/>
        <arg name="read_all">FALSE</arg>
        <arg name="recreate_listener">FALSE</arg>
        <arg name="recreate_stack"/>
        <arg name="zero_state_wait">FALSE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="active">TRUE</arg>
        <arg name="close_iut_first">FALSE</arg>
        <arg name="close_zockets">TRUE</arg>
        <arg name="env"/>
        <arg name="iterations_num"/>
        <arg name="read_all">FALSE</arg>
        <arg name="recreate_listener"/>
        <arg name="recreate_stack">TRUE</arg>
        <arg name="zero_state_wait"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="active">FALSE</arg>
        <arg name="close_iut_first">FALSE</arg>
        <arg name="close_zockets">TRUE</arg>
        <arg name="env"/>
        <arg name="iterations_num"/>
        <arg name="read_all"/>
        <arg name="recreate_listener"/>
        <arg name="recreate_stack">TRUE</arg>
        <arg name="zero_state_wait"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="active"/>
        <arg name="close_iut_first">TRUE</arg>
        <arg name="close_zockets"/>
        <arg name="env"/>
        <arg name="iterations_num"/>
        <arg name="read_all"/>
        <arg name="recreate_listener"/>
        <arg name="recreate_stack">FALSE</arg>
        <arg name="zero_state_wait">TRUE</arg>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="active"/>
        <arg name="close_iut_first">FALSE</arg>
        <arg name="close_zockets"/>
        <arg name="env"/>
        <arg name="iterations_num"/>
        <arg name="read_all"/>
        <arg name="recreate_listener"/>
        <arg name="recreate_stack">FALSE</arg>
        <arg name="zero_state_wait"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="active"/>
        <arg name="close_iut_first">TRUE</arg>
        <arg name="close_zockets"/>
        <arg name="env"/>
        <arg name="iterations_num"/>
        <arg name="read_all"/>
        <arg name="recreate_listener"/>
        <arg name="recreate_stack">TRUE</arg>
        <arg name="zero_state_wait"/>
        <notes/>
      </iter>
      <iter result="PASSED">
        <arg name="active"/>
        <arg name="close_iut_first"/>
        <arg name="close_zockets">FALSE</arg>
        <arg name="env"/>
        <arg name="iterations_num"/>
        <arg name="read_all"/>
        <arg name="recreate_listener"/>
        <arg name="recreate_stack"/>
        <arg name="zero_state_wait"/>
        <notes/>
      </iter>
    </test>
    <test name="listeners_limit" type="script">
      <objective>Specify maximum number of listener endpoints using ZF attribute max_tcp_listen_endpoints, allocate all possible listener zockets and check that all of them can accept connections.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="max_endpoints"/>
        <notes/>
      </iter>
    </test>
    <test name="listen_reuse_laddr" type="script">
      <objective>Create two listener zockets binding them to the completely or partly same address:port couple.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="first_addr_type"/>
        <arg name="second_addr_type"/>
        <arg name="same_stack"/>
        <arg name="close_listener"/>
        <arg name="close_accepted"/>
        <arg name="close_iut_first"/>
        <notes/>
      </iter>
    </test>
    <test name="share_events_queue" type="script">
      <objective>Establish a few TCP connections using single stack, send data to and from zockets in random order, check that data is delivered to proper IUT zockets and tester sockets and no data is lost.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="open_method"/>
        <arg name="zft_num"/>
        <arg name="data_size_min"/>
        <arg name="data_size_max"/>
        <arg name="bunches_num"/>
        <arg name="bunch_size"/>
        <arg name="send_from"/>
        <arg name="recv_func"/>
        <notes/>
      </iter>
    </test>
    <test name="recv_buffer_overfilling" type="script">
      <objective>Transmit data from tester to a few TCP zockets until receive buffers are overfilled, read and check all the data. Examine maximum buffer size of individual zocket and common stack buffer.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="gradual"/>
        <arg name="n_bufs"/>
        <arg name="open_method"/>
        <arg name="small_packet"/>
        <arg name="zft_num"/>
        <arg name="recv_func"/>
        <notes/>
      </iter>
    </test>
    <test name="send_buffer_overfilling" type="script">
      <objective>Transmit data from TCP zockets until send buffers are overfilled, read and check all the data. Examine maximum buffer size of individual zocket and common stack buffer.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="gradual"/>
        <arg name="large_n_bufs"/>
        <arg name="open_method"/>
        <arg name="small_packet"/>
        <arg name="zft_num"/>
        <notes/>
      </iter>
    </test>
    <test name="zft_send_buffers" type="script">
      <objective>Perform a few calls of zft_send() in a row using various (length, iovcnt) send buffers.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="iovcnt"/>
        <arg name="length"/>
        <arg name="number"/>
        <notes/>
      </iter>
    </test>
    <test name="connect_after_fault" type="script">
      <objective>Establish TCP connection after failed connection attempt.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="rst"/>
        <arg name="no_route"/>
        <notes/>
      </iter>
    </test>
    <test name="two_active_zockets" type="script">
      <objective>Create two TCP zocket in single or two different ZF stacks. Bind and connect them to various combinations of local and remote addresses including partly coinciding (IP or port). Check data can be transmitted in both directions with both connections if they are established.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="first_bind_addr"/>
        <arg name="first_connect_addr"/>
        <arg name="second_bind_addr"/>
        <arg name="second_connect_addr"/>
        <arg name="single_stack"/>
        <arg name="recv_func"/>
        <notes/>
      </iter>
    </test>
    <test name="incomplete_connect" type="script">
      <objective>Call a TCP function on the zocket when TCP connection fails or is in progress.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="status"/>
        <arg name="function"/>
        <notes/>
      </iter>
    </test>
    <test name="zft_handle" type="script">
      <objective>Perform all possible actions on a zft_handle zocket.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="bind"/>
        <notes/>
      </iter>
    </test>
    <test name="zft_send_space" type="script">
      <objective>Check send buffer size using zft_send_space() while it is gradually filled.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="open_method"/>
        <notes/>
      </iter>
    </test>
    <test name="reactor_recv_event" type="script">
      <objective>Poll for ZF reactor status until there is an event with incoming data.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="open_method"/>
        <arg name="recv_func"/>
        <notes/>
      </iter>
    </test>
    <test name="zc_recv_done_some" type="script">
      <objective>Read a part of data using zero-copy receive, check that the remaining part can be read later.
</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="open_method"/>
        <arg name="send_iut"/>
        <arg name="done_some_zero"/>
        <notes/>
      </iter>
    </test>
    <test name="msg_more" type="script">
      <objective>Send some data with MSG_MORE flag using zft_send() or zft_send_single(). Check that data is sent only in full segments when MSG_MORE flag is specified.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="open_method"/>
        <arg name="func"/>
        <notes/>
      </iter>
    </test>
    <test name="sleep_after_stack_alloc" type="script">
      <objective>Check whether unnecessary SYN retransmits happen if some sleep is introduced between ZF stack allocation and creating a zocket.</objective>
      <notes/>
      <iter result="PASSED">
        <arg name="env"/>
        <arg name="open_method"/>
        <notes/>
      </iter>
    </test>
  </iter>
</test>
